# معماری و مسئولیت‌های پروژه داشبورد

## نمای کلی پروژه
این پروژه یک داشبورد مدیریتی مدرن است که با استفاده از ابزارهای زیر توسعه داده شده است:
- **فریم‌ورک رابط کاربری**: ShadcnUI (ترکیب TailwindCSS و RadixUI)
- **ابزار ساخت**: Vite
- **مدیریت مسیرها**: TanStack Router
- **زبان برنامه‌نویسی**: TypeScript
- **آیکون‌ها**: Tabler Icons

ساختار پروژه به گونه‌ای طراحی شده است که قابلیت توسعه و نگهداری آسان را فراهم کند.

---

## ساختار پوشه‌ها و مسئولیت‌ها

### سطح ریشه (Root Level)
- **`index.html`**: نقطه ورود اصلی برنامه.
- **`package.json`**: مدیریت وابستگی‌ها و اسکریپت‌های پروژه.
- **`vite.config.ts`**: تنظیمات مربوط به ابزار Vite.
- **`.github/`**: فایل‌های مرتبط با GitHub مانند ورک‌فلوها.
- **`public/`**: شامل فایل‌های استاتیک مانند تصاویر.
- **`src/`**: کد اصلی برنامه.

---

### پوشه `src/`
- **`index.css`**: استایل‌های کلی برنامه.
- **`main.tsx`**: نقطه ورود برنامه React.
- **`routeTree.gen.ts`**: تنظیمات مسیرهای برنامه (به صورت خودکار تولید شده).
- **`vite-env.d.ts`**: تعریف‌های TypeScript برای Vite.

#### زیرپوشه‌ها:
1. **`assets/`**: شامل فایل‌های استاتیک مانند فونت‌ها و تصاویر اضافی.
2. **`components/`**: کامپوننت‌های قابل استفاده مجدد رابط کاربری.
   - **`layout/`**: شامل کامپوننت‌های مربوط به ساختار کلی صفحه مانند نوار کناری و هدر.
     - **`app-sidebar.tsx`**: مدیریت نوار کناری برنامه.
     - **`header.tsx`**: مدیریت هدر برنامه.
     - **`top-nav.tsx`**: مدیریت ناوبری بالای صفحه.
   - **`ui/`**: شامل کامپوننت‌های رابط کاربری مشترک مانند دکمه‌ها و فرم‌ها.
     - **`button.tsx`**: کامپوننت دکمه.
     - **`input.tsx`**: کامپوننت ورودی.
     - **`table.tsx`**: کامپوننت جدول.
3. **`config/`**: فایل‌های تنظیمات برنامه.
   - **`fonts.ts`**: تنظیمات مربوط به فونت‌ها.
4. **`context/`**: مدیریت وضعیت‌های سراسری برنامه.
   - **`theme-context.tsx`**: مدیریت وضعیت تم.
   - **`search-context.tsx`**: مدیریت وضعیت جستجو.
5. **`features/`**: ماژول‌های مربوط به ویژگی‌های خاص.
   - **`dashboard/`**: ماژول‌های مرتبط با صفحه داشبورد.
     - **`index.tsx`**: صفحه اصلی داشبورد.
     - **`components/`**: کامپوننت‌های مرتبط با داشبورد.
   - **`auth/`**: ماژول‌های مرتبط با احراز هویت.
     - **`sign-in/`**: صفحه ورود.
     - **`sign-up/`**: صفحه ثبت‌نام.
   - **`settings/`**: ماژول‌های مرتبط با تنظیمات.
     - **`profile/`**: تنظیمات پروفایل کاربر.
     - **`notifications/`**: تنظیمات اعلان‌ها.
6. **`hooks/`**: هوک‌های سفارشی React برای منطق قابل استفاده مجدد.
   - **`use-dialog-state.tsx`**: مدیریت وضعیت دیالوگ‌ها.
   - **`use-mobile.tsx`**: مدیریت وضعیت دستگاه‌های موبایل.
7. **`utils/`**: توابع کمکی برای وظایف عمومی.
   - **`handle-server-error.ts`**: مدیریت خطاهای سمت سرور.
   - **`show-submitted-data.tsx`**: نمایش داده‌های ارسال شده.

---

## مسئولیت فایل‌ها
- **`theme-switch.tsx`**: کامپوننتی برای تغییر تم (روشن، تاریک، یا سیستم).
- **`ui/`**: شامل کامپوننت‌های رابط کاربری مشترک مانند دکمه‌ها و منوها.
- **`context/theme-context.tsx`**: مدیریت وضعیت تم در سطح سراسری.
- **`features/dashboard/`**: ماژول‌های مرتبط با صفحه داشبورد.
- **`features/auth/`**: مدیریت صفحات و فرآیندهای احراز هویت.

---

## نکات توسعه
1. برای افزودن آیتم‌های جدید به نوار کناری، از پوشه `components/layout/` استفاده کنید.
2. صفحات جدید را در پوشه `features/` اضافه کنید.
3. از `context/` برای مدیریت وضعیت‌های سراسری مانند احراز هویت یا تنظیمات استفاده کنید.
4. اطمینان حاصل کنید که تمام کامپوننت‌های جدید قابل استفاده مجدد باشند و با معماری فعلی سازگار باشند.

---

## منابع
- **مستندات ShadcnUI**: [https://ui.shadcn.com](https://ui.shadcn.com)
- **مستندات Vite**: [https://vitejs.dev](https://vitejs.dev)
- **TanStack Router**: [https://tanstack.com/router/latest](https://tanstack.com/router/latest)